*********************servlet***************************
## (2)如何重定向?
response.sendRedirect(String url);

## (3)重定向的特点
a.重定向的地址是任意的。

b.重定向之后，浏览器地址栏的地址会发生变化。

## (2)如何转发?
	step1.绑订数据到request对象上。
step2.获得转发器。

	RequestDispatcher rd = 
		request.getRequestDispatcher(String uri);
	注:
		a.RequestDispatcher是一个接口，该方法会返回一个实现了
		该接口的对象（即转发器）。
		b.uri是转发的目的地，通常是一个jsp的地址。
		c.RequestDispatcher可以理解为是一个媒介，web组件
		可以通过RequestDispatcher来通知容器去调用另外一个web
		组件。
		d.转发的本质是一个web组件通知容器去调用另外一个web组件。request.setAttribute(String name,Object obj);
step3.转发
	rd.forward(request,response);		

## (3)转发的特点
a.转发之后，浏览器地址栏的地址不变。

b.转发的目的地有限制，要求属于同一个web应用。
# 2. 比较转发与重定向
a.浏览器地址栏的地址有无变化?

	重定向之后，浏览器地址栏的地址会发生变化；
	转发之后，浏览器地址栏的地址不变。

b.目的地有无限制?

	重定向地址没有任何限制，转发有限制(要求属于同一个web应用)。

c.能否共享request对象?

	转发所涉及的各个web组件可以共享同一个request对象，
	重定向不行。
	注：
		c1.容器收到请求之后，会立即创建request对象和response
		对象，一旦响应发送完毕，容器会立即删除这两个对象。
		即request对象和response对象的生存时间很短暂(在
		一次请求与响应期间存在)。

		c2.重定向是两次请求，上次请求创建的request对象和response
		对象已经被删除。

d.转发是一件事没有做完，让另外一个web组件继续做；而重定向是
一件事已经完成，去做另外一件独立的事。

## (2)如何获得Session对象?
方法1.HttpSession session = request.getSession(boolean flag)
方法2.HttpSession session = request.getSession();

//绑订数据
	session.setAttribute(String name,Object obj);
//依据绑订名，获得绑订值，如果绑订值不存在，返回null
	Object session.getAttribute(String name);
	//解除绑订
	session.removeAttribute(String name);
## (7)比较session与cookie
session支持更丰富的数据类型(cookie只能存放字符串)、更安全、
可以存放更多的数据(cookie只能存放少量的数据)。
但是，session是将状态保存在服务器端，有可能会占用过多的内存。

# 3.如何让一个servlet处理多种请求?
step1.使用后缀匹配，比如:
	<servlet-mapping>
    	<servlet-name>ActionServlet</servlet-name>
    	<url-pattern>*.do</url-pattern>
  	</servlet-mapping>
## (1)什么是过滤器?
servlet规范当中定义的一种特殊的组件，用于拦截servlet容器的
调用过程。Servlet容器收到请求之后，会先调过滤器，再调用servlet。
## (3)过滤器的优先级
当有多个过滤器都满足拦截要求，则容器依据<filter-mapping>
配置的先后顺序来执行。
## (4)初始化参数
step1.配置初始化参数

	<init-param>
  		<param-name>illegal</param-name>
  		<param-value>猫</param-value>
  	</init-param>
web.xml中配置过滤器
<filter>
    <filter-name></filter-name>
    <filter-class></filter-class>
</filter>

<filter-mapping>
    <filter-name></filter-name>
    <url-pattern></url-pattern>
</filter-mapping>
# 2.监听器
## (1)什么是监听器?
servlet规范当中定义的一种特殊的组件，用于监听servlet容器产生
的事件并进行相应的处理。
## (3)如何写一个监听器?
step1.写一个java类，实现相应的监听器接口。

<!-- 配置监听器 -->
	<listener>
		<listener-class>web.CountListener</listener-class>
	</listener> 
<!-- 配置处理器。class属性：指定处理器的类名。 -->
		<bean class="demo.HelloController"/>

##拦截器基本使用
自定义拦截器需要实现HandlerInterceptor接口，该接口中共3个抽象方法，其中，preHandle()方法是在控制器之前执行的，
可以起到拦截效果，该方法的返回值表示是否拦截，为true时放行，为false时拦截。
1. 过滤器和拦截器的区别
使用环境不同：过滤器是Java EE中的组件，任何Java Web项目都可以使用；拦截器是SpringMVC中的组件，仅当项目中使用了SpringMVC框架后才可以使用！

执行时间节点不同：过滤器是执行在Servlet之前的，拦截器是执行在Controller之前的（暂不考虑拦截器在控制器之后的2次执行）！

使用复杂程度不同：过滤器只能配置1个路径（<url-pattern>）表示过滤范围，拦截器可以配置若干个<mvc:mapping>表示拦截范围，同时还可以使用若干个<mvc:exclude-mapping>表示例外（白名单），所以配置时更加灵活！

当然，也有一些相同之处，例如：都在控制器之前执行，都可以起到“拦截效果”，都可以形成“链”。



********************Spring*******************************
3.3. 通过Spring获取对象--类中存在无参数构造方法（常用）
在Spring的配置文件（applicationContext.xml）中，添加：
<bean id="date" class="java.util.Date"></bean>
配置中，class表示“类”，取值应该是类的全名，即包名和类名，id是自定义的名称，通常使用类名并且首字母改为小写，
例如类名是Date，则id值为date，如果类名是Student，则id值为student。
完成配置后，就可以在程序中，通过Spring根据date名称获取java.util.Date的对象，可以在src\main\java中创建可执行的Java类：
package cn.tedu.spring;

public class SpringTest {

    public static void main(String[] args) {

    }

}
然后，编写程序：
public static void main(String[] args) {
    // 加载Spring的配置文件，获取Spring容器
    ApplicationContext ac
        = new ClassPathXmlApplicationContext(
                "applicationContext.xml");

    // 通过Spring容器获取对象
    Date date = (Date) ac.getBean("date");

    // 测试输出
    System.out.println(date);
}

3.7. 由Spring管理的对象的作用域
Spring所管理的对象，默认都是单例的，配置时，通过scope属性可以配置是否单例，默认取值为singleton，
当取值为prototype时，是非单例的！
单例模式可以区分为：懒汉式、饿汉式。
默认情况下，由Spring管理的单例对象是饿汉式的，通过lazy-init属性可以调整，该属性的值是布尔类型。
<bean id="student"
    class="cn.tedu.spring.Student"
    scope="singleton"
    lazy-init="true"></bean>
3.8. 由Spring管理的对象的生命周期
仅由Spring管理的、单例的对象存在生命周期问题！
由Spring管理的类中添加初始化方法和销毁方法，方法必须是void和无参数的，例如：
public class Stduent {
    // 初始化方法
    public void init() {
        System.out.println("Student.init()");
    }
    // 销毁方法
    public void destroy() {
        System.out.println("Student.destroy()");
    }
}
Spring的配置文件中进行配置：
bean id="student"
    class="cn.tedu.spring.Student"
    init-method="init"
    destroy-method="destroy"></bean>
注意：对于非单例的对象而言，生命周期方法是没有意义的
3.9. 通过SET方式注入属性的值
3.9. 通过SET方式注入属性的值

基本概念：通过Spring的配置，确定某个类中的某个属性的值，使得最终获取对象时，属性是已经被赋值的。

假设存在UserDao类，在类中有String username和String password表示访问数据库的用户名和密码：
public class UserDao {

    // 模拟：访问数据库的用户名
    String username;

    // 模拟：访问数据库的密码
    String password;
}

需要注入值的属性，必须有set方法，即设置它的值的方法，且方法名称必须以set作为前缀：
public void setUsername(String u) {
    username = u;
}

然后，在Spring的配置文件中：
<bean id="userDao" 
    class="cn.tedu.spring.UserDao">
    <property name="username" 
        value="root">
    </property>
</bean>

即：添加子级<property>节点，在该节点，配置name和value，其中，name表示属性，value表示值。
注意：在配置的name时，值应该是需要注入的属性的set方法名称中不包含set的部分，且首字母是小写的！

3. 单例模式示例
public class King {
    private static King king;

    private King() {
    }

    public static King getKing() {
        if (king == null) {
            king = new King();
        }
        return king;
    }
}
2. Spring注解（Annotation）
Spring中定义了一些注解，可以取代在Spring的XML文件中的配置！
几种通用注解

@Component ：通用组件类

@Controller：控制器类

@Service：业务类

@Repository：数据访问类/持久层处理的类
添加在类的声明之前，表示这个类是一个“组件”，是希望由Spring进行管理的！功能和用法上来说，是完全一样的
要想注解起作用，在Spring的配置文件中开启组件扫描。
<context:component-scan 
    base-package="cn.tedu.spring.dao" />
配置中，base-package表示根包，即当配置为cn.tedu.spring时，其子级包例如cn.tedu.spring.dao或cn.tedu.spring.service等
都在扫描范围之内！
如果没有显式的指定bean-id，默认为使用类名且首字母改为小写，例如UserDao类的bean-id就是userDao。
以上注解都可以添加配置，例如@Service("bean-id")。
2.3. 作用域与生命周期
由Spring管理的对象，默认是饿汉式的单例的，通过在类的声明之前添加注解@Lazy可以调整：
@Component("userDao")
@Lazy(true)
public class UserDao {
}

还可以通过@Scope("singleton")或@Scope("prototype")注解调整是否为单例的：
@Service
@Scope("prototype")
public class UserService {
}

关于生命周期方法，依然是先自定义生命周期方法，在初始化方法之前添加@PostConstruct注解，在销毁方法之前添加@PreDestroy注解，
这2个注解都是Java EE的注解，来自javax包下，所以，在使用之前，需要为当前项目添加Tomcat运行环境，代码部分例如：

@Component("userDao")
public class UserDao {

    public UserDao() {
        System.out.println("UserDao的构造方法被执行！");
    }

    @PostConstruct
    public void init() {
        System.out.println("UserDao.init()");
    }

    @PreDestroy
    public void destroy() {
        System.out.println("UserDao.destroy()");
    }
}
2.4. 【重要】自动装配
假设在UserDao中存在public void findUserByUsername()方法，然后，在UserService中声明了private UserDao userDao;属性，
并且，存在public void login()方法，在方法内部，调用了userDao的findUserByUsername()方法：
@Component("userDao")
public class UserDao {

    public void findUserByUsername() {
        System.out.println("UserDao.findUserByUsername()");
    }

}

@Service
public class UserService {

    private UserDao userDao;

    public void login() {
        System.out.println("UserService.login()");
        userDao.findUserByUsername();
    }

}


在需要自动装配属性值的属性之前，添加@Autowired注解，就可以实现自动装配：
@Autowired
private UserDao userDao;
注意：使用注解的自动装配不需要为属性添加SET方法！
添加@Autowired实现自动装配，其装配方式是byType的，所以，在使用时，需要确保
“其对应的值在Spring容器中应该是有且仅有1个的”！

通过@Resource注解也可以实现自动装配！它是优先根据byName实现自动装配，在没有显式的指定bean-id的情况下，
如果无法byName装配，则会尝试根据byType实现自动装配。
**********SpringMVC**********************************
2. SpringMVC框架的核心组件

DispatcherServlet：接收所有请求的Servlet（不包括例如css、js等），并且根据请求路径分发到各控制器；

HandlerMapping：记录请求路径与控制器或处理请求的方法之间的映射关系；

Controller：具体处理请求，确定如何响应的组件；

ModelAndView：控制器的返回结果，其中，Model表示数据，View表示最终负责响应的视图组件的名称；

ViewResolver：根据视图组件名称得到具体的视图组件。

 ************************************MyBatis框架****************************************
每张数据表都有一个与之对应的实体类，实体类中，有相同数量的属性，数据类型应该保持一致，
属性名称与字段名应该一一对应（在Java中的属性名称应该采用驼峰命名法，而数据库领域中并不区分大小写），
所有的属性都应该是私有的，且都存在公有的SET/GET方法，整个实体类应该是实现了Serializable接口的！
2.3. 获取当前表中所有用户数据
分析需要执行的SQL语句：

select * from t_user
设计抽象方法：

List<User> findAll();
在查询时，MyBatis会得到List集合类型的结果，如果存在匹配的数据，则全部封装在该List集合中，如果没有匹配的数据，则返回的List集合是长度为0的集合。

配置映射：

<select id="findAll"
    resultType="xx.xx.xx.User">
    select * from t_user
</select>
任何查询都必须指定resultType属性，当然，也可以替换为resultMap
2.5. 获取t_user表中数据的数量
分析需要执行的SQL语句：

select count(id) from t_user
设计抽象方法：

Integer getCount();
在查询时，查询结果与返回值的类型相匹配即可！所以，如果查询的是数据的数量，查询结果是数字，
所设计的抽象方法的返回值就可以是Integer。

配置映射：

<select id="getCount"
    resultType="java.lang.Integer">
    select count(id) from t_user
</select>
2.6. 小结
2.使用MyBatis编程主要做好：(1)设计SQL语句； (2)设计抽象方法； (3)配置映射；
3.关于抽象方法：如果是增删改操作，返回值固定设计为Integer，如果是查询操作，根据查询结果来决定，
例如可能是List<User>、User、Integer……；方法的名称应该尽量对应所执行的数据操作，而不应该是某个业务，
例如插入数据的方法名可以是insert，或者addnew，但是不应该使用reg；目前，只允许使用最多1个参数，
如果一定要使用多个，请封装为1个参数；
4.关于映射配置：根据所执行的操作选择<insert>、<delete>、<update>、<select>节点，无论是哪个节点，必须配置id，
取值为对应的抽象方法的名称；在SQL语句中的参数使用#{}框住即可；
5.关于执行结果：如果是增删改操作，只能获得受影响的行数，可以根据该结果判断操作成功与否；如果是执行查询操作，
当结果声明为List时，无论是否查询到数据，返回有效的List集合对象，如果没有匹配的数据，则List的长度为0；当结果声明为某个对象，
例如User时，如果没有匹配的数据，则返回null。
   1. 执行插入数据时获取自增长的id
useGeneratedKeys="true"
keyProperty="id"
以上配置中，useGeneratedKeys表示获取自增长的键（自增长的字段的值），keyProperty表示键的属性名，
即对应的类中的属性名（即该id是User类中的id，并非t_user表中的id）！

通常，需要自定义<resultMap>时，主要用于解决多表数据关联查询的问题。

1. MyBatis中的占位符
MyBatis中，常见的占位符格式是#{参数}，其中，也可能是参数对象中的属性，如果参数是Map类型，还可以是Map中的key。

使用#{}的占位符可用于替换值，例如：

select * from t_user where username=?
即可替换以上语句中的问号(?)，在实际运行时，MyBatis会将以上SQL语句进行预编译，并后续使用#{}替换问号(?)。

假设获取用户列表时，排序规则不确定，可能使用的抽象方法是：

List<User> findAllOrderedList(String orderBy);
配置的映射可能是：

List<User> findAllOrderedList(
    @Param("orderBy") String orderBy);

<select id="xx" resultType="xx">
    select * from t_user
    order by ${orderBy}
</select>
调用时：

mapper.findAllOrderedList("id asc");
mapper.findAllOrderedList("id desc");

#{ }和${ }区别
使用#{}是预编译的（没有SQL注入风险，无需关注数据类型），使用${}不是预编译的；
使用#{}只能替换某个值，使用${}可以替换SQL语句中的任何部分；














